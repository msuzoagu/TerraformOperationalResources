AWSTemplateFormatVersion: '2010-09-09'
Description: create role users must assume to run Terraform commands

Parameters: 
  Env:
    Type: String
  PolicyName:
    Type: String
  ValueOfUserTag:
    Type: String
  SessionDuration:
    Type: String
  UserMgtAccountId:
    Type: String
  TerraformAccountId:
    Type: String
  BackendRole: 
    Type: String 


Rules:
  Deployment:
    Assertions:
      - Assert: !Equals
        - !Ref AWS::AccountId
        - !Ref TerraformAccountId #TrustingAccount
        AssertDescription: "resources must be created in Terraform account"

Resources:
  Role: 
    Type: 'AWS::IAM::Role'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties: 
      RoleName: !Ref BackendRole
      Description: assume role to run Terraform commands
      MaxSessionDuration: !Ref SessionDuration
      ManagedPolicyArns:
        - !Ref RolePolicy
      AssumeRolePolicyDocument: #trust policy for role
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              AWS: !Ref UserMgtAccountId #TrustedAccount
            Action:
              - 'sts:AssumeRole'
            Condition:
              Bool: # must authenticate via mfa to assume role
                aws:MultiFactorAuthPresent: true
              StringEquals:
                aws:PrincipalType:
                  - "User"
              StringLike:
                aws:PrincipalTag/Terraformers:
                  - !Ref ValueOfUserTag
                sts:RoleSessionName:
                  - '${aws:username}'
  RolePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties: 
      ManagedPolicyName: !Ref PolicyName 
      Description: !Sub "permissions for ${BackendRole}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowStateBucketList
            Effect: Allow
            Action: 
              - 's3:ListBucket'
              - 's3:GetBucketVersioning'
            Resource:
              - Fn::ImportValue: !Sub "${Env}-StateBucketArn"
          - Sid: AllowStateReadWrite
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Resource: !Join
              - ''
              - - Fn::ImportValue: !Sub "${Env}-StateBucketArn"
                - /*
          - Sid: AllowStateLockReadWrite
            Effect: Allow
            Action:
              - 'dynamodb:DescribeTable'
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:DeleteItem'  
              - 'dynamodb:ListTagsOfResource'
            Resource: 
              - Fn::ImportValue: !Sub "${Env}-LockTableArn"

Outputs:
  RoleId:
    Description: id of role
    Value: !GetAtt Role.RoleId
    Export:
      Name: 
        "BackendRoleId"